// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from '@hey-api/client-fetch'
import type {
  UtilsUtilsViewHealthCheckData,
  UtilsUtilsViewHealthCheckResponse,
  UsersAuthJwtLoginData,
  UsersAuthJwtLoginResponse,
  UsersAuthJwtLoginError,
  UsersAuthJwtLogoutData,
  UsersAuthJwtLogoutResponse,
  UsersRegisterRegisterData,
  UsersRegisterRegisterResponse,
  UsersRegisterRegisterError,
  UsersUsersCurrentUserData,
  UsersUsersCurrentUserResponse,
  UsersUsersPatchCurrentUserData,
  UsersUsersPatchCurrentUserResponse,
  UsersUsersPatchCurrentUserError,
  UsersUsersDeleteUserData,
  UsersUsersDeleteUserResponse,
  UsersUsersDeleteUserError,
  UsersUsersUserData,
  UsersUsersUserResponse,
  UsersUsersUserError,
  UsersUsersPatchUserData,
  UsersUsersPatchUserResponse,
  UsersUsersPatchUserError,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Utilsview.Health Check
 * Health check endpoint for Docker.
 */
export const utilsUtilsViewHealthCheck = <ThrowOnError extends boolean = false>(
  options?: Options<UtilsUtilsViewHealthCheckData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UtilsUtilsViewHealthCheckResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/utils/health-check',
    ...options,
  })
}

/**
 * Auth:Jwt.Login
 */
export const usersAuthJwtLogin = <ThrowOnError extends boolean = false>(
  options: Options<UsersAuthJwtLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UsersAuthJwtLoginResponse,
    UsersAuthJwtLoginError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: '/api/v1/users/auth/jwt/login',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  })
}

/**
 * Auth:Jwt.Logout
 */
export const usersAuthJwtLogout = <ThrowOnError extends boolean = false>(
  options?: Options<UsersAuthJwtLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<UsersAuthJwtLogoutResponse, unknown, ThrowOnError>(
    {
      security: [
        {
          in: 'cookie',
          name: 'vibe-travel-jwt',
          type: 'apiKey',
        },
      ],
      url: '/api/v1/users/auth/jwt/logout',
      ...options,
    },
  )
}

/**
 * Register:Register
 */
export const usersRegisterRegister = <ThrowOnError extends boolean = false>(
  options: Options<UsersRegisterRegisterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UsersRegisterRegisterResponse,
    UsersRegisterRegisterError,
    ThrowOnError
  >({
    url: '/api/v1/users/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Users:Current User
 */
export const usersUsersCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<UsersUsersCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersUsersCurrentUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'vibe-travel-jwt',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/users/me',
    ...options,
  })
}

/**
 * Users:Patch Current User
 */
export const usersUsersPatchCurrentUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersUsersPatchCurrentUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersUsersPatchCurrentUserResponse,
    UsersUsersPatchCurrentUserError,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'vibe-travel-jwt',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/users/me',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Users:Delete User
 */
export const usersUsersDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersUsersDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UsersUsersDeleteUserResponse,
    UsersUsersDeleteUserError,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'vibe-travel-jwt',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/users/{id}',
    ...options,
  })
}

/**
 * Users:User
 */
export const usersUsersUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersUsersUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    UsersUsersUserResponse,
    UsersUsersUserError,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'vibe-travel-jwt',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/users/{id}',
    ...options,
  })
}

/**
 * Users:Patch User
 */
export const usersUsersPatchUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersUsersPatchUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersUsersPatchUserResponse,
    UsersUsersPatchUserError,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'vibe-travel-jwt',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/users/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}
