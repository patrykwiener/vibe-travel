// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { NotesNoteCbvListNotesData, NotesNoteCbvListNotesResponse, NotesNoteCbvListNotesError, NotesNoteCbvCreateNoteData, NotesNoteCbvCreateNoteResponse, NotesNoteCbvCreateNoteError, NotesNoteCbvDeleteNoteData, NotesNoteCbvDeleteNoteResponse, NotesNoteCbvDeleteNoteError, NotesNoteCbvGetNoteByIdData, NotesNoteCbvGetNoteByIdResponse, NotesNoteCbvGetNoteByIdError, NotesNoteCbvUpdateNoteData, NotesNoteCbvUpdateNoteResponse, NotesNoteCbvUpdateNoteError, NotesPlanRouterGeneratePlanData, NotesPlanRouterGeneratePlanResponse, NotesPlanRouterGeneratePlanError, NotesPlanRouterGetActivePlanData, NotesPlanRouterGetActivePlanResponse, NotesPlanRouterGetActivePlanError, NotesPlanRouterCreateOrAcceptPlanData, NotesPlanRouterCreateOrAcceptPlanResponse, NotesPlanRouterUpdatePlanData, NotesPlanRouterUpdatePlanResponse, NotesPlanRouterUpdatePlanError, ProfileUserProfileCbvGetProfileData, ProfileUserProfileCbvGetProfileResponse, ProfileUserProfileCbvUpdateProfileData, ProfileUserProfileCbvUpdateProfileResponse, ProfileUserProfileCbvUpdateProfileError, UsersAuthJwtLoginData, UsersAuthJwtLoginResponse, UsersAuthJwtLoginError, UsersAuthJwtLogoutData, UsersAuthJwtLogoutResponse, UsersRegisterRegisterData, UsersRegisterRegisterResponse, UsersRegisterRegisterError, UsersUsersCurrentUserData, UsersUsersCurrentUserResponse, UsersUsersPatchCurrentUserData, UsersUsersPatchCurrentUserResponse, UsersUsersPatchCurrentUserError, UsersUsersDeleteUserData, UsersUsersDeleteUserResponse, UsersUsersDeleteUserError, UsersUsersUserData, UsersUsersUserResponse, UsersUsersUserError, UsersUsersPatchUserData, UsersUsersPatchUserResponse, UsersUsersPatchUserError, UtilsUtilsViewHealthCheckData, UtilsUtilsViewHealthCheckResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List user's notes
 * Allows authenticated users to list their travel notes with pagination and search by title.
 */
export const notesNoteCbvListNotes = <ThrowOnError extends boolean = false>(options?: Options<NotesNoteCbvListNotesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotesNoteCbvListNotesResponse, NotesNoteCbvListNotesError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/notes/',
        ...options
    });
};

/**
 * Create a new note
 * Allows authenticated users to create a new travel note.
 */
export const notesNoteCbvCreateNote = <ThrowOnError extends boolean = false>(options: Options<NotesNoteCbvCreateNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotesNoteCbvCreateNoteResponse, NotesNoteCbvCreateNoteError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/notes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a note
 * Allows authenticated users to delete an existing travel note they own.
 */
export const notesNoteCbvDeleteNote = <ThrowOnError extends boolean = false>(options: Options<NotesNoteCbvDeleteNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<NotesNoteCbvDeleteNoteResponse, NotesNoteCbvDeleteNoteError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/notes/{note_id}',
        ...options
    });
};

/**
 * Get note details
 * Allows authenticated users to retrieve the details of a specific travel note they own.
 */
export const notesNoteCbvGetNoteById = <ThrowOnError extends boolean = false>(options: Options<NotesNoteCbvGetNoteByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NotesNoteCbvGetNoteByIdResponse, NotesNoteCbvGetNoteByIdError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/notes/{note_id}',
        ...options
    });
};

/**
 * Update a note
 * Allows authenticated users to update an existing travel note they own.
 */
export const notesNoteCbvUpdateNote = <ThrowOnError extends boolean = false>(options: Options<NotesNoteCbvUpdateNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<NotesNoteCbvUpdateNoteResponse, NotesNoteCbvUpdateNoteError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/notes/{note_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate an AI-powered travel plan based on a note
 * Generates a plan proposal based on the content of the specified note and user preferences.
 */
export const notesPlanRouterGeneratePlan = <ThrowOnError extends boolean = false>(options: Options<NotesPlanRouterGeneratePlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotesPlanRouterGeneratePlanResponse, NotesPlanRouterGeneratePlanError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/notes/{note_id}/plan/generate',
        ...options
    });
};

/**
 * Get the active plan for a note
 * Retrieves the most recently updated active plan for the specified note.
 */
export const notesPlanRouterGetActivePlan = <ThrowOnError extends boolean = false>(options: Options<NotesPlanRouterGetActivePlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NotesPlanRouterGetActivePlanResponse, NotesPlanRouterGetActivePlanError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/notes/{note_id}/plan',
        ...options
    });
};

/**
 * Create or accept a travel plan for a note
 * Creates a new travel plan or accepts/modifies an AI-generated plan proposal.
 */
export const notesPlanRouterCreateOrAcceptPlan = <ThrowOnError extends boolean = false>(options: Options<NotesPlanRouterCreateOrAcceptPlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotesPlanRouterCreateOrAcceptPlanResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/notes/{note_id}/plan',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update an existing active plan for a note
 * Updates the text of an existing active plan for the specified note.
 */
export const notesPlanRouterUpdatePlan = <ThrowOnError extends boolean = false>(options: Options<NotesPlanRouterUpdatePlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<NotesPlanRouterUpdatePlanResponse, NotesPlanRouterUpdatePlanError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/notes/{note_id}/plan',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Userprofilecbv.Get Profile
 * Retrieve the user's profile.
 */
export const profileUserProfileCbvGetProfile = <ThrowOnError extends boolean = false>(options?: Options<ProfileUserProfileCbvGetProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProfileUserProfileCbvGetProfileResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/profile/',
        ...options
    });
};

/**
 * Userprofilecbv.Update Profile
 * Update the user's profile.
 */
export const profileUserProfileCbvUpdateProfile = <ThrowOnError extends boolean = false>(options: Options<ProfileUserProfileCbvUpdateProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProfileUserProfileCbvUpdateProfileResponse, ProfileUserProfileCbvUpdateProfileError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/profile/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Auth:Jwt.Login
 */
export const usersAuthJwtLogin = <ThrowOnError extends boolean = false>(options: Options<UsersAuthJwtLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersAuthJwtLoginResponse, UsersAuthJwtLoginError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/v1/users/auth/jwt/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Auth:Jwt.Logout
 */
export const usersAuthJwtLogout = <ThrowOnError extends boolean = false>(options?: Options<UsersAuthJwtLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UsersAuthJwtLogoutResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/auth/jwt/logout',
        ...options
    });
};

/**
 * Register:Register
 */
export const usersRegisterRegister = <ThrowOnError extends boolean = false>(options: Options<UsersRegisterRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersRegisterRegisterResponse, UsersRegisterRegisterError, ThrowOnError>({
        url: '/api/v1/users/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Users:Current User
 */
export const usersUsersCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<UsersUsersCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersUsersCurrentUserResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/me',
        ...options
    });
};

/**
 * Users:Patch Current User
 */
export const usersUsersPatchCurrentUser = <ThrowOnError extends boolean = false>(options: Options<UsersUsersPatchCurrentUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersUsersPatchCurrentUserResponse, UsersUsersPatchCurrentUserError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Users:Delete User
 */
export const usersUsersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<UsersUsersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersUsersDeleteUserResponse, UsersUsersDeleteUserError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/{id}',
        ...options
    });
};

/**
 * Users:User
 */
export const usersUsersUser = <ThrowOnError extends boolean = false>(options: Options<UsersUsersUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersUsersUserResponse, UsersUsersUserError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/{id}',
        ...options
    });
};

/**
 * Users:Patch User
 */
export const usersUsersPatchUser = <ThrowOnError extends boolean = false>(options: Options<UsersUsersPatchUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersUsersPatchUserResponse, UsersUsersPatchUserError, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'vibe-travel-jwt',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Utilsview.Health Check
 * Health check endpoint for Docker.
 */
export const utilsUtilsViewHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<UtilsUtilsViewHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UtilsUtilsViewHealthCheckResponse, unknown, ThrowOnError>({
        url: '/api/v1/utils/health-check',
        ...options
    });
};
