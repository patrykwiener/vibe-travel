// This file is auto-generated by @hey-api/openapi-ts

export type ErrorModel = {
  detail:
    | string
    | {
        [key: string]: string
      }
}

export type HttpValidationError = {
  detail?: Array<ValidationError>
}

/**
 * User create schema.
 */
export type UserCreate = {
  email: string
  password: string
  is_active?: boolean | null
  is_superuser?: boolean | null
  is_verified?: boolean | null
}

/**
 * User read schema.
 */
export type UserRead = {
  id: string
  email: string
  is_active?: boolean
  is_superuser?: boolean
  is_verified?: boolean
}

/**
 * User update schema.
 */
export type UserUpdate = {
  password?: string | null
  email?: string | null
  is_active?: boolean | null
  is_superuser?: boolean | null
  is_verified?: boolean | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type Login = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type UtilsUtilsViewHealthCheckData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/utils/health-check'
}

export type UtilsUtilsViewHealthCheckResponses = {
  /**
   * Successful Response
   */
  200: boolean
}

export type UtilsUtilsViewHealthCheckResponse =
  UtilsUtilsViewHealthCheckResponses[keyof UtilsUtilsViewHealthCheckResponses]

export type UsersAuthJwtLoginData = {
  body: Login
  path?: never
  query?: never
  url: '/api/v1/users/auth/jwt/login'
}

export type UsersAuthJwtLoginErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersAuthJwtLoginError = UsersAuthJwtLoginErrors[keyof UsersAuthJwtLoginErrors]

export type UsersAuthJwtLoginResponses = {
  /**
   * Successful Response
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type UsersAuthJwtLoginResponse = UsersAuthJwtLoginResponses[keyof UsersAuthJwtLoginResponses]

export type UsersAuthJwtLogoutData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/users/auth/jwt/logout'
}

export type UsersAuthJwtLogoutErrors = {
  /**
   * Missing token or inactive user.
   */
  401: unknown
}

export type UsersAuthJwtLogoutResponses = {
  /**
   * Successful Response
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type UsersAuthJwtLogoutResponse =
  UsersAuthJwtLogoutResponses[keyof UsersAuthJwtLogoutResponses]

export type UsersRegisterRegisterData = {
  body: UserCreate
  path?: never
  query?: never
  url: '/api/v1/users/auth/register'
}

export type UsersRegisterRegisterErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersRegisterRegisterError =
  UsersRegisterRegisterErrors[keyof UsersRegisterRegisterErrors]

export type UsersRegisterRegisterResponses = {
  /**
   * Successful Response
   */
  201: UserRead
}

export type UsersRegisterRegisterResponse =
  UsersRegisterRegisterResponses[keyof UsersRegisterRegisterResponses]

export type UsersUsersCurrentUserData = {
  body?: never
  path?: never
  query?: never
  url: '/api/v1/users/me'
}

export type UsersUsersCurrentUserErrors = {
  /**
   * Missing token or inactive user.
   */
  401: unknown
}

export type UsersUsersCurrentUserResponses = {
  /**
   * Successful Response
   */
  200: UserRead
}

export type UsersUsersCurrentUserResponse =
  UsersUsersCurrentUserResponses[keyof UsersUsersCurrentUserResponses]

export type UsersUsersPatchCurrentUserData = {
  body: UserUpdate
  path?: never
  query?: never
  url: '/api/v1/users/me'
}

export type UsersUsersPatchCurrentUserErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Missing token or inactive user.
   */
  401: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUsersPatchCurrentUserError =
  UsersUsersPatchCurrentUserErrors[keyof UsersUsersPatchCurrentUserErrors]

export type UsersUsersPatchCurrentUserResponses = {
  /**
   * Successful Response
   */
  200: UserRead
}

export type UsersUsersPatchCurrentUserResponse =
  UsersUsersPatchCurrentUserResponses[keyof UsersUsersPatchCurrentUserResponses]

export type UsersUsersDeleteUserData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/api/v1/users/{id}'
}

export type UsersUsersDeleteUserErrors = {
  /**
   * Missing token or inactive user.
   */
  401: unknown
  /**
   * Not a superuser.
   */
  403: unknown
  /**
   * The user does not exist.
   */
  404: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUsersDeleteUserError = UsersUsersDeleteUserErrors[keyof UsersUsersDeleteUserErrors]

export type UsersUsersDeleteUserResponses = {
  /**
   * Successful Response
   */
  204: void
}

export type UsersUsersDeleteUserResponse =
  UsersUsersDeleteUserResponses[keyof UsersUsersDeleteUserResponses]

export type UsersUsersUserData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: '/api/v1/users/{id}'
}

export type UsersUsersUserErrors = {
  /**
   * Missing token or inactive user.
   */
  401: unknown
  /**
   * Not a superuser.
   */
  403: unknown
  /**
   * The user does not exist.
   */
  404: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUsersUserError = UsersUsersUserErrors[keyof UsersUsersUserErrors]

export type UsersUsersUserResponses = {
  /**
   * Successful Response
   */
  200: UserRead
}

export type UsersUsersUserResponse = UsersUsersUserResponses[keyof UsersUsersUserResponses]

export type UsersUsersPatchUserData = {
  body: UserUpdate
  path: {
    id: string
  }
  query?: never
  url: '/api/v1/users/{id}'
}

export type UsersUsersPatchUserErrors = {
  /**
   * Bad Request
   */
  400: ErrorModel
  /**
   * Missing token or inactive user.
   */
  401: unknown
  /**
   * Not a superuser.
   */
  403: unknown
  /**
   * The user does not exist.
   */
  404: unknown
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUsersPatchUserError = UsersUsersPatchUserErrors[keyof UsersUsersPatchUserErrors]

export type UsersUsersPatchUserResponses = {
  /**
   * Successful Response
   */
  200: UserRead
}

export type UsersUsersPatchUserResponse =
  UsersUsersPatchUserResponses[keyof UsersUsersPatchUserResponses]

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {})
}
