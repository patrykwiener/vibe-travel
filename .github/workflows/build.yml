name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Database configuration for CI
  POSTGRES_SERVER: localhost
  POSTGRES_PORT: 5432
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: vibetravel_test

  # FastAPI Settings for CI
  PROJECT_NAME: VibeTravels
  SECRET_KEY: test-secret-key-for-ci
  ENVIRONMENT: dev
  API_V1_STR: /api/v1
  BACKEND_CORS_ORIGINS: '["http://localhost:3000", "http://localhost:8080"]'

  # First Admin User for tests
  FIRST_SUPERUSER: admin@test.com
  FIRST_SUPERUSER_PASSWORD: testpassword

  # AI generation settings (mock for CI)
  USE_MOCK_AI: 1
  OPENROUTER_API_KEY: mock-key
  OPENROUTER_MODEL: mock-model

jobs:
  backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vibetravel_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        load: true
        tags: backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create .env file
      run: |
        cat > .env << EOF
        PROJECT_NAME=${PROJECT_NAME}
        SECRET_KEY=${SECRET_KEY}
        ENVIRONMENT=${ENVIRONMENT}
        API_V1_STR=${API_V1_STR}
        BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
        POSTGRES_SERVER=${POSTGRES_SERVER}
        POSTGRES_PORT=${POSTGRES_PORT}
        POSTGRES_USER=${POSTGRES_USER}
        POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        POSTGRES_DB=${POSTGRES_DB}
        FIRST_SUPERUSER=${FIRST_SUPERUSER}
        FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
        USE_MOCK_AI=${USE_MOCK_AI}
        OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
        OPENROUTER_MODEL=${OPENROUTER_MODEL}
        EOF

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for postgres..."
          sleep 2
        done

    - name: Run backend linting
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/backend:/app \
          -w /app \
          backend:latest \
          ./scripts/lint.sh

    - name: Run database pre-start checks
      run: |
        docker run --rm \
          --env-file .env \
          --network host \
          -v ${{ github.workspace }}/backend:/app \
          -w /app \
          backend:latest \
          python tests_pre_start.py

    - name: Run backend tests with coverage
      run: |
        # Run tests with coverage (using setup.cfg configuration)
        docker run --name backend-test \
          --env-file .env \
          --network host \
          -v ${{ github.workspace }}/backend:/app \
          -w /app \
          backend:latest \
          pytest -vv

        # Copy coverage reports from container to host
        mkdir -p ${{ github.workspace }}/backend-coverage
        docker cp backend-test:/app/htmlcov/. ${{ github.workspace }}/backend-coverage/ || echo "No HTML coverage found"
        docker cp backend-test:/app/coverage.xml ${{ github.workspace }}/backend-coverage/ || echo "No XML coverage found"
        docker rm backend-test

    - name: Upload backend coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend-coverage/

  frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        load: true
        tags: frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_BACKEND_URL=http://localhost:8000

    - name: Run frontend linting
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/frontend:/app \
          -v /app/node_modules \
          -w /app \
          frontend:latest \
          sh -c "npm run lint"

    - name: Run frontend type checking
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/frontend:/app \
          -v /app/node_modules \
          -w /app \
          frontend:latest \
          sh -c "npm run type-check"

    - name: Run frontend tests with coverage
      run: |
        # Run tests without mounting coverage directory
        docker run --name frontend-test \
          -v ${{ github.workspace }}/frontend:/app \
          -v /app/node_modules \
          -w /app \
          frontend:latest \
          sh -c "npm run test:coverage"

        # Copy coverage from container to host
        mkdir -p ${{ github.workspace }}/frontend-coverage
        docker cp frontend-test:/app/coverage/. ${{ github.workspace }}/frontend-coverage/
        docker rm frontend-test

    - name: Upload frontend coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend-coverage/
