name: CI/CD Pipeline

# CI/CD Strategy:
# - develop branch ‚Üí automatic deploy to staging
# - master branch ‚Üí manual approval ‚Üí deploy to production
# - pull requests ‚Üí only CI checks (no deployment)

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution (not recommended for production)'
        required: false
        default: false
        type: boolean
      reason:
        description: 'Reason for manual trigger'
        required: false
        type: string

env:
  # Container Registry
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

  # Database configuration for CI
  POSTGRES_SERVER: localhost
  POSTGRES_PORT: 5432
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: vibetravel_test

  # FastAPI Settings for CI
  PROJECT_NAME: VibeTravels
  SECRET_KEY: test-secret-key-for-ci
  ENVIRONMENT: dev
  API_V1_STR: /api/v1
  BACKEND_CORS_ORIGINS: '["http://localhost:3000", "http://localhost:8080"]'

  # First Admin User for tests
  FIRST_SUPERUSER: admin@test.com
  FIRST_SUPERUSER_PASSWORD: testpassword

  # AI generation settings (mock for CI)
  USE_MOCK_AI: 1
  OPENROUTER_API_KEY: mock-key
  OPENROUTER_MODEL: mock-model

jobs:
  backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vibetravel_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        load: true
        tags: backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create .env file
      run: |
        cat > .env << EOF
        PROJECT_NAME=${PROJECT_NAME}
        SECRET_KEY=${SECRET_KEY}
        ENVIRONMENT=${ENVIRONMENT}
        API_V1_STR=${API_V1_STR}
        BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
        POSTGRES_SERVER=${POSTGRES_SERVER}
        POSTGRES_PORT=${POSTGRES_PORT}
        POSTGRES_USER=${POSTGRES_USER}
        POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        POSTGRES_DB=${POSTGRES_DB}
        FIRST_SUPERUSER=${FIRST_SUPERUSER}
        FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
        USE_MOCK_AI=${USE_MOCK_AI}
        OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
        OPENROUTER_MODEL=${OPENROUTER_MODEL}
        EOF

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for postgres..."
          sleep 2
        done

    - name: Run backend linting
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/backend:/app \
          -w /app \
          backend:latest \
          ./scripts/lint.sh

    - name: Run backend security scan
      run: |
        # Use a separate lightweight container for security scanning to avoid conflicts
        docker run --rm \
          -v ${{ github.workspace }}/backend:/workspace \
          -w /workspace \
          python:3.13-slim \
          sh -c "
            set -e
            echo 'üîç Installing security scanning tools in clean environment...'
            pip install --no-cache-dir bandit[toml]==1.7.5

            echo 'üîí Running bandit security scan...'
            bandit -r src/ -f json -o bandit-report.json -ll || echo 'Bandit scan completed with warnings'

            echo '‚úÖ Security scan completed!'
          "

    - name: Check security scan results
      run: |
        echo "üìä Security scan summary:"

        # Check bandit results
        if [ -f backend/bandit-report.json ]; then
          echo "‚úÖ Bandit report generated"

          # Debug: show bandit JSON structure
          echo "üîç Bandit report sample:" && head -n 3 backend/bandit-report.json

          # Parse bandit results with proper fallback
          BANDIT_HIGH=$(cat backend/bandit-report.json | jq -r '[.results[]? | select(.issue_severity == "HIGH")] | length // 0' 2>/dev/null)
          # Ensure we have a valid number
          if [ -z "$BANDIT_HIGH" ] || ! [[ "$BANDIT_HIGH" =~ ^[0-9]+$ ]]; then
            echo "‚ö†Ô∏è Could not parse bandit results, defaulting to 0"
            BANDIT_HIGH=0
          fi

          echo "üîç Bandit found $BANDIT_HIGH high-severity issues"
          if [ "$BANDIT_HIGH" -gt 0 ]; then
            echo "‚ö†Ô∏è  High-severity security issues found!"
            exit 1
          else
            echo "‚úÖ No high-severity security issues found"
          fi
        else
          echo "‚ùå Bandit report not found"
          exit 1
        fi

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: backend-security-reports
        path: backend/bandit-report.json
      if: always()

    - name: Run database pre-start checks
      run: |
        docker run --rm \
          --env-file .env \
          --network host \
          -v ${{ github.workspace }}/backend:/app \
          -w /app \
          backend:latest \
          python tests_pre_start.py

    - name: Run backend tests with coverage
      if: github.event_name != 'workflow_dispatch' || github.event.inputs.skip_tests != 'true'
      run: |
        # Run tests with coverage (using setup.cfg configuration)
        docker run --name backend-test \
          --env-file .env \
          --network host \
          -v ${{ github.workspace }}/backend:/app \
          -w /app \
          backend:latest \
          pytest -vv

        # Copy coverage reports from container to host
        mkdir -p ${{ github.workspace }}/backend-coverage
        docker cp backend-test:/app/htmlcov/. ${{ github.workspace }}/backend-coverage/ || echo "No HTML coverage found"
        docker cp backend-test:/app/coverage.xml ${{ github.workspace }}/backend-coverage/ || echo "No XML coverage found"
        docker rm backend-test

    - name: Upload backend coverage reports
      if: github.event_name != 'workflow_dispatch' || github.event.inputs.skip_tests != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend-coverage/

  frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        load: true
        tags: frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_BACKEND_URL=http://localhost:8000

    - name: Run frontend linting
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/frontend:/app \
          -v /app/node_modules \
          -w /app \
          frontend:latest \
          sh -c "npm run lint"

    - name: Run frontend type checking
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/frontend:/app \
          -v /app/node_modules \
          -w /app \
          frontend:latest \
          sh -c "npm run type-check"

    - name: Run frontend security audit
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/frontend:/app \
          -v /app/node_modules \
          -w /app \
          frontend:latest \
          sh -c "
            echo 'üîç Running npm security audit...' &&
            npm audit --audit-level high --json > /app/audit-report.json || echo 'Audit completed with findings' &&
            echo '‚úÖ Frontend security audit completed!'
          "

    - name: Check frontend security results
      run: |
        echo "üìä Frontend security audit summary:"
        if [ -f frontend/audit-report.json ]; then
          echo "‚úÖ Audit report generated"

          # Install jq if not available for JSON parsing
          which jq >/dev/null || (echo "Installing jq..." && apt-get update && apt-get install -y jq)

          # Check for high/critical vulnerabilities with proper fallback
          HIGH_VULNS=$(cat frontend/audit-report.json | jq -r '.metadata.vulnerabilities.high // 0' 2>/dev/null)
          CRITICAL_VULNS=$(cat frontend/audit-report.json | jq -r '.metadata.vulnerabilities.critical // 0' 2>/dev/null)

          # Ensure we have valid numbers
          if [ -z "$HIGH_VULNS" ] || ! [[ "$HIGH_VULNS" =~ ^[0-9]+$ ]]; then
            HIGH_VULNS=0
          fi
          if [ -z "$CRITICAL_VULNS" ] || ! [[ "$CRITICAL_VULNS" =~ ^[0-9]+$ ]]; then
            CRITICAL_VULNS=0
          fi

          echo "üîç Found $HIGH_VULNS high-severity and $CRITICAL_VULNS critical vulnerabilities"

          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ö†Ô∏è  High or critical severity vulnerabilities detected!"
            echo "üìã Run 'npm audit' locally to see details and fix with 'npm audit fix'"
            exit 1
          fi
        else
          echo "‚ùå Audit report not found"
          exit 1
        fi

    - name: Upload frontend security audit
      uses: actions/upload-artifact@v4
      with:
        name: frontend-security-reports
        path: frontend/audit-report.json
      if: always()

    - name: Run frontend tests with coverage
      if: github.event_name != 'workflow_dispatch' || github.event.inputs.skip_tests != 'true'
      run: |
        # Run tests without mounting coverage directory
        docker run --name frontend-test \
          -v ${{ github.workspace }}/frontend:/app \
          -v /app/node_modules \
          -w /app \
          frontend:latest \
          sh -c "npm run test:coverage"

        # Copy coverage from container to host
        mkdir -p ${{ github.workspace }}/frontend-coverage
        docker cp frontend-test:/app/coverage/. ${{ github.workspace }}/frontend-coverage/
        docker rm frontend-test

    - name: Upload frontend coverage reports
      if: github.event_name != 'workflow_dispatch' || github.event.inputs.skip_tests != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend-coverage/

  push-backend-image:
    needs: backend
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')) || github.event_name == 'workflow_dispatch'

    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  push-frontend-image:
    needs: frontend
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')) || github.event_name == 'workflow_dispatch'

    permissions:
      contents: read
      packages: write

    outputs:
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: [push-backend-image, push-frontend-image]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/develop') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Log Manual Trigger Info
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "üéØ Manual workflow trigger detected"
          echo "Target environment: ${{ github.event.inputs.environment }}"
          echo "Skip tests: ${{ github.event.inputs.skip_tests }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Triggered by: ${{ github.actor }}"

      - name: Mock Deploy to Staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Backend image: ${{ needs.push-backend-image.outputs.backend-image }}"
          echo "Frontend image: ${{ needs.push-frontend-image.outputs.frontend-image }}"
          echo "Environment: Staging"
          echo "‚úÖ Staging deployment completed successfully!"

      - name: Health Check
        run: |
          echo "üîç Running health checks on staging..."
          echo "‚úÖ All health checks passed!"

  deploy-production:
    needs: [push-backend-image, push-frontend-image]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://vibe-travels-production.com

    steps:
      - name: Log Manual Trigger Info
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "üéØ Manual workflow trigger detected"
          echo "Target environment: ${{ github.event.inputs.environment }}"
          echo "Skip tests: ${{ github.event.inputs.skip_tests }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Triggered by: ${{ github.actor }}"

      - name: Manual Approval Required
        run: |
          echo "‚è≥ Waiting for manual approval..."
          echo "This deployment requires approval in GitHub Actions tab"
          echo "Navigate to Actions ‚Üí This workflow ‚Üí Review deployments"

      - name: Mock Deploy to Production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Backend image: ${{ needs.push-backend-image.outputs.backend-image }}"
          echo "Frontend image: ${{ needs.push-frontend-image.outputs.frontend-image }}"
          echo "Environment: Production"
          echo "‚úÖ Production deployment completed successfully!"

      - name: Health Check
        run: |
          echo "üîç Running health checks on production..."
          echo "‚úÖ All health checks passed!"

      - name: Notify Success
        run: |
          echo "üéâ VibeTravels has been successfully deployed to production!"
          echo "üåê Application is now live at: https://vibe-travels-production.com"
